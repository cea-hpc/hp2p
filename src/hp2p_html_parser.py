#!/usr/bin/env python3
# Copyright (C) 2010-2023 CEA/DAM
# Copyright (C) 2010-2023 Laurent Nguyen <laurent.nguyen@cea.fr>
#
# This file is part of HP2P.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
"""Script and functions to process the HTML file generated by HP2P benchmark
"""

import sys
import json
import click
import plotly.express as px


def read_between_patterns(file_path, start_pattern, end_pattern):
    """Find string between two motifs in a file

    Parameters
    ----------
    file_path : string
       Filename of HTML file to look for string

    start_pattern : string
       motif at the start

    end_pattern : string
       motif at the end

    Returns
    -------
    string
       string between motifs else None if error
    """
    try:
        with open(file_path, 'r', encoding="utf-8") as file:
            file_contents = file.read()
            start_index = file_contents.find(start_pattern)
            if start_index == -1:
                print(f"'{start_pattern}' was not found in '{file_path}'")
                return None
            start_index += len(start_pattern)
            end_index = file_contents.find(end_pattern, start_index)
            if end_index == -1:
                print(f"'{end_pattern}' was not found in '{file_path}'")
                return None
            return file_contents[start_index:end_index]
    except FileNotFoundError:
        print(f"'{file_path}' was not found")
        sys.exit(1)
    return None


def read_hostlist(filename):
    """Read hostlist variable

    Hostlist is a list of string containing hostname

    Parameters
    ----------
    file_path : string
       Filename of HTML file

    Returns
    -------
    list
       list of hostnames
    """
    found_string = read_between_patterns(filename, "// hostlist start",
                                         "// hostlist end").splitlines()[2]
    last_comma_index = found_string.rfind(',')
    found_string = found_string[:last_comma_index] + \
        found_string[last_comma_index + 1:]
    return json.loads("{ \"tab\": " + found_string + "}")["tab"]


def read_msgsize(filename):
    """Read msgsize variable

    msgsize is an integer containing the message size used for the benchmark

    Parameters
    ----------
    file_path : string
       Filename of HTML file

    Returns
    -------
    integer
       message size
    """
    return int(read_between_patterns(filename, "// msg_size start",
                                     "// msg_size end")
               .splitlines()[2])


def read_bandwidth(filename):
    """Read bendwidth variable

    Bandwidth is a matrix of bandwiths

    Parameters
    ----------
    file_path : string
       Filename of HTML file

    Returns
    -------
    list
       list of hostnames
    """
    found_string = read_between_patterns(filename, "// bandwidth start",
                                         "// bandwidth end").splitlines()[2]
    return json.loads("{ \"tab\": " + found_string.replace(", ]", " ]")
                      .replace(",     ]", " ]") + "}")["tab"]


def read_file(filename):
    """Read HTML input file

    Parameters
    ----------
    file_path : string
       Filename of HTML file

    Returns
    -------
    hashmap
       data
    """
    data = {}
    data["hostlist"] = read_hostlist(filename)
    data["msgsize"] = read_msgsize(filename)
    data["bandwidth"] = read_bandwidth(filename)
    return data


@click.group()
def main():
    """ Main function
    """
    return


@main.command()
@click.argument('filename')
@click.option('--output', default="output.png", help='Name of PNG file')
def png(filename, output):
    """ Command to generate PNG static image
    """
    data = read_file(filename)
    fig = px.imshow(data["bandwidth"], x=data["hostlist"],
                    y=data["hostlist"], color_continuous_scale="Jet")
    fig.update_layout(title_text='Bandwidth (MB/s)', title_x=0.5)
    fig.write_image(output)


if __name__ == '__main__':
    main()
